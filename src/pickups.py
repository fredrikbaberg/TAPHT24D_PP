"""Olika typer av f√∂rem√•l att plocka upp."""

class Item:
    """Representerar saker man kan plocka upp."""
    def __init__(self, name, value=10, symbol="?"):
        self.name = name
        self.value = value
        self.symbol = symbol

    def __str__(self):
        return self.symbol

class Fruit(Item):
    """ Frukt, ett Item med v√§rde 20 po√§ng. """
    def __init__(self, name, symbol='?'):
        super().__init__(name=name, value=20, symbol=symbol)

class Shovel(Item):
    """ Spade. Inga po√§ng, kan ta bort en v√§gg en g√•ng. """
    # TODO: J. Spade - en ny sak man kan plocka upp. N√§r man g√•r in i en v√§gg n√§sta g√•ng,\n
    # f√∂rbrukas spaden f√∂r att ta bort v√§ggen.
    def __init__(self):
        super().__init__(name='shovel', value=0, symbol='ü•Ñ')

class Trap(Item):
    """ F√§lla. Ska ligga kvar p√• kartan. """
    # TODO: I. F√§llor - introducera valfri f√§lla till spelplanen. Om man g√•r p√• en ruta med en\n
    # f√§lla ska man f√∂rlora 10 po√§ng. F√§llan ska ligga kvar s√• att man kan falla i den flera g√•nger.
    def __init__(self):
        super().__init__(name='trap', value=-10, symbol='üï≥Ô∏è')

class Chest(Item):
    """ Kista, kr√§ver nyckel f√∂r att √∂ppnas. """
    # TODO: K. Nycklar och kistor - slumpa minst en nyckel och lika m√•nga kistor p√• spelplanen.\n
    # N√§r man g√•r p√• en ruta med en nyckel plockar man upp den i sitt inventory. Om man kommer\n
    # till en kista och har minst en nyckel, √∂ppnar man kistan och plockar upp en skatt som √§r\n
    # v√§rd 100 po√§ng. (Nyckeln √§r f√∂rbrukad.)
    def __init__(self):
        super().__init__(name='chest', value=0, symbol='üíº')

class Key(Item):
    """ Nyckel, kr√§vs f√∂r att √∂ppna kista. """
    # TODO: K. Nycklar och kistor - slumpa minst en nyckel och lika m√•nga kistor p√• spelplanen.\n
    # N√§r man g√•r p√• en ruta med en nyckel plockar man upp den i sitt inventory.\n
    # Om man kommer till en kista och har minst en nyckel, √∂ppnar man kistan och plockar upp en\n
    # skatt som √§r v√§rd 100 po√§ng. (Nyckeln √§r f√∂rbrukad.)
    def __init__(self):
        super().__init__(name='key', value=0, symbol='üóù')

class Treasure(Item):
    """ Skatt. Ligger i skattkista. """
    # TODO: K. Nycklar och kistor - slumpa minst en nyckel och lika m√•nga kistor p√• spelplanen.\n
    # N√§r man g√•r p√• en ruta med en nyckel plockar man upp den i sitt inventory.\n
    # Om man kommer till en kista och har minst en nyckel, √∂ppnar man kistan och plockar upp en\n
    # skatt som √§r v√§rd 100 po√§ng. (Nyckeln √§r f√∂rbrukad.)
    def __init__(self):
        super().__init__(name='treasure', value=100, symbol='üëë')

class Exit(Item):
    """ Utg√•ng. Kr√§ver att alla ursprungliga saker √§r upplockade. """
    # TODO: M. Exit - slumpa ett "E" p√• kartan. N√§r man har plockat upp alla ursprungliga saker,\n
    # kan man g√• till exit f√∂r att vinna spelet. Men innan man tagit upp alla har inte Exit n√•gon\n
    # effekt.
    def __init__(self):
        super().__init__(name='exit', value=0, symbol='E')

# DONE: D. Fruktsallad - alla frukter ska vara v√§rda 20 po√§ng i st√§llet f√∂r 10.
pickups = [
    Item("carrot"),
    Fruit("apple"),
    Fruit("strawberry"),
    Fruit("cherry"),
    Fruit("watermelon"),
    Item("radish"),
    Item("cucumber"),
    Item("meatball")
]


def randomize(grid, pickups): #pylint: disable=dangerous-default-value
    """Slumpa f√∂rem√•l p√• kartan."""
    for item in pickups:
        while True:
            # slumpa en position tills vi hittar en som √§r ledig
            x = grid.get_random_x()
            y = grid.get_random_y()
            if grid.is_empty(x, y):
                grid.set(x, y, item)
                break  # avbryt while-loopen, forts√§tt med n√§sta varv i for-loopen
